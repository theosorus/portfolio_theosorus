{
    "navbar": {
        "home": "Home",
        "aboutme": "About me",
        "projects": "Projects",
        "contact": "contact",
        "career": "Career"
    },
    "career": {
        "title": "Career Track",
        "present": "Present",
        "tags": {
            "company": "Company",
            "university": "University",
            "internship": "Internship"
        }
    },
    "landpage": {
        "greeting": "Hello, I'm",
        "name": "Théo",
        "welcome": "Welcome to my portfolio! I am a computer science student with a passion for",
        "ai": "Artificial Intelligence",
        "particularly": "particularly",
        "deeplearning": "Deep Learning",
        "and": "and",
        "machinelearning": "Machine Learning",
        "enjoy": "I especially enjoy working on projects that involve",
        "computervision": "Computer Vision",
        "nlp": "NLP",
        "scrollNextSection": "Scroll to next section"
    },
    "skills": {
        "languages": "Languages",
        "ai": "AI / ML Data Science",
        "webdevelopment": "Web Development",
        "devsofware": "Development Tools & Software",
        "database": "Databases",
        "graphics": "Graphics & 3D",
        "testingquality": "Testing & Quality"
    },
    "aboutme": {
        "title": "About Me",
        "description_before_name": "My name is",
        "name": "Theo",
        "description_before_age": "I'm",
        "age": "19 years old",
        "description_after_age": "and I'm studying computer science at the Gradignan Institute in Bordeaux",
        "interest_title": "Interest",
        "hobbies_title": "Hobbies",
        "interests": {
            "ai": "Artificial Intelligence",
            "ml": "Machine Learning",
            "ds": "Data Science",
            "dp": "Deep Learning",
            "model_engineering": "Model Engineering",
            "computer_vision": "Computer Vision",
            "natural_language_processing": "Natural Language Processing"
        },
        "hobbies": {
            "f1": "Formula 1",
            "ccg": "Collectible card games",
            "chess": "Chess",
            "travel": "Traveling",
            "running": "Running"
        },
        "all_links": "All links",
        "download_cv": "Download CV",
        "copied": "Copied !"
    },
    "footer": {
        "name": "Théo Castillo",
        "role": "Computer science student - Bordeaux, France",
        "email": "theocastillo@yahoo.com",
        "rights": "© {{year}} {{name}} - All rights reserved",
        "note": "Personal portfolio - No data collected",
        "built_with": "Built with React & TypeScript",
        "back_to_top": "Back to top",
        "contact": "Contact"
    },
    "projects": {
    "title" : "Projects",
    "scrollMessage" : "Scroll to discover more projects",
        "snake_ai": {
            "title": "Snake AI",
            "description": "Creation of the Snake game and an AI that learns to play the game using deep reinforcement learning with PyTorch and Pygame."
        },
        "large_language_model": {
            "title": "Large Language Model",
            "description": "Building a French language model based on transformers, trained on a French dataset using PyTorch in Python."
        },
        "neural_networks_library": {
            "title": "Neural Networks Library",
            "description": "A python neural network library implemented from scratch with NumPy, including linear layers, loss functions, activation functions, and optimizers."
        },
        "neural_style_transfer": {
            "title": "Neural Style Transfer",
            "description": "Implementation of neural style transfer to apply a style to an image using the VGG-19 model in Python with PyTorch."
        },
        "generative_adversial_network": {
            "title": "Generative Adversial Network",
            "description": "Implementation of a WGAN-GP on the CelebA dataset with PyTorch for face generation"
        },
        "cellular_automata_3d_renderer": {
            "title": "Cellular Automata 3D Renderer",
            "description": "Library to visualise Cellular Automata easily with OpenGL in Python"
        },
        "tradeformer": {
            "title": "TradeFormer",
            "description": "Training a financial forecasting model based on the AutoFormer architecture with PyTorch and Alpaca.py"
        },
        "diffusion_model": {
            "title": "Diffusion Model",
            "description": "A PyTorch diffusion model to generate realistic synthetic cat images from gaussian noise"
        },
        "vae": {
            "title": "VAE",
            "description": "Creation and training of a variational autoencoder on the Fashion MNIST dataset to generate synthetic data using Python and PyTorch."
        },
        "maze_generator_and_solver": {
            "title": "Maze Generator and Solver",
            "description": "A maze generator and solver using A* in python with pygame"
        },
        "graph_visualizer": {
            "title": "Graph Visualizer",
            "description": "Software for visualizing graphs, calculating a minimum spanning tree, and implementing an edge bundling algorithm in JavaFx."
        },
        "car_plates_detection": {
            "title": "Car Plates Detection",
            "description": "Create a pipeline of two finetunned YOLOv8 models to detect and analyze car plates"
        },
        "connect4_ai": {
            "title": "Connect4 AI",
            "description": "Creation of the game Connect Four and an AI for the game based on the Monte Carlo algorithm using Pygame in Python."
        },
        "particles_simulation": {
            "title": "Particles Simulation",
            "description": "Simulation of a particle system using SFML in C++ with Verlet integration."
        },
        "procedural_generation": {
            "title": "Procedural Generation",
            "description": "Procedural Map generation using Perlin Noise with P5.js"
        },
        "towa_ai": {
            "title": "Towa AI",
            "description": "Implementation of rules for a board game, followed by the creation of an AI based on the Minimax algorithm for the game in Java."
        },
        "mysuperhoroscope": {
            "title": "MySuperHoroscope",
            "description": "Creation of a daily horoscope website with a payment and subscription system using Stripe, built with Django and Python."
        },
        "votator": {
            "title": "Votator",
            "description": "Front-end application built with React, Tailwind CSS, and TypeScript. It allows users to vote for tournaments on various themes by interacting with an API."
        },
        "labyrinth_game": {
            "title": "Labyrinth game",
            "description": "Maze game built with JavaFX, where a character must navigate through a labyrinth filled with enemies."
        },
        "robocup_manager": {
            "title": "Robocup Manager",
            "description": "Full-stack application built with Symfony, Twig, and Tailwind CSS, enabling the management of robot competitions, championships, and tournament brackets."
        },
        "gymwalker": {
            "title": "GymWalker",
            "description": "Gymnasium environment where a humanoid learns to walk using reinforcement learning techniques in Python."
        },
        "motivai": {
            "title": "MotivAI",
            "description": "Tool for creating personalized cover letters using LangChain with an agent capable of conducting internet research."
        },
        "music_generation_transformer": {
            "title": "Music Generation Transformer",
            "description": "Transformer-based model for generating classical music, utilizing sparse attention and trained on the BACH dataset."
        },
        "minishell": {
            "title": "MiniShell",
            "description": "Creation of an interactive shell in C, directly in the terminal, capable of executing basic commands and running external commands."
        },
        "hask_gpt": {
            "title": "GPT2 in Haskell",
            "description": "GPT2 implementation in Haskell with the Hasktorch library, inspired by Andrej Karpathy's Pytorch implementation."
        },
        "formula_tracker": {
            "title": "Formula Tracker",
            "description": "Training a YOLO model on a custom Formula 1 dataset to detect cars based on their team."
        },
        "deep_rubiks": {
            "title": "Deep Rubiks",
            "description": "A modern implementation of the DeepCubeA algorithm for solving Rubik's Cube using neural networks and A* with web visualization."
        },
        "argus": {
            "title": "Argus",
            "description": "Creation of a Unity simulation in which we simulate a self-guided missile using computer vision with a YOLOv8 model."
        },
        "categories": {
            "All": "All",
            "Personal": "Personnal",
            "School": "School",
            "AI": "AI",
            "Simulations": "Simulations",
            "Web": "Web",
            "Software": "Sofware"
        },
        "types": {
            "Personal Project": "Personal Project",
            "School Project": "School Project",
            "Professional Project": "Professional Project"
        },
        "view_all_button" : "View all of my projects"
    }
}